/*
  Opcion Font Viewer
  Copyright (C) 2004 Paul Chiu. All Rights Reserved.

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/

/*
 * SystemFontsPanel.java
 *
 * Created on 21 February 2004, 18:26
 */
package FontViewer.components;
import FontViewer.windows.*;

import java.awt.*;
import javax.swing.*;

public class SystemFontsPanel extends javax.swing.JPanel implements ListPanel {
    private MainWindow mw;
    private String[] names;
    private String location;
    
    /** Creates new form SystemFontsPanel */
    public SystemFontsPanel(MainWindow mw) {
        this.mw = mw;
        initComponents();
        initSystemFonts();
    }
    
    private void initSystemFonts() {
        names = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
        location = "System Font";
        systemFontsList.setListData(names);
    }
    
    public String[] getItem(int itemNumber) {
        String[] s = new String[3];
        
        // Assign current item to s[]
        if ((itemNumber >= 0)&&(itemNumber < names.length)) {
            s[0] = names[itemNumber];
            s[1] = location;
            s[2] = itemNumber+"";
        }

        return s; 
    }
    
    public int getNumItems() {
        int items = 0;
        
        if (names != null) {
            items = names.length;
        }
        
        return items;
    }
    
    public String[] getCurrentItem() {
        String[] s = new String[3];
        int p = systemFontsList.getSelectedIndex();
        
        if (p >= 0) {
            s[0] = names[p];
            s[1] = location;
            s[2] = p+"";
        }
        
        return s;
    }

    public int getCurrentItemNum() {
        return systemFontsList.getSelectedIndex();
    }
    
    public void selectItem(String name, String loc) {
        systemFontsList.setSelectedValue(name, true);
        int p = systemFontsList.getSelectedIndex();
        if (p >= 0)
            mw.setCurrentFont(names[p], location, p);        
    }
    
    public void selectNext() {
        int i = systemFontsList.getSelectedIndex();
        if (i >= 0) {
            if ((i + 1) < names.length) {
                i += 1;
            }
            setCurrentItem(i, true);
        } else {
            setCurrentItem(0, true);
        }
    }
    
    public void selectPrev() {
        int i = systemFontsList.getSelectedIndex();
        if (i >= 0) {
            if ((i - 1) >= 0) {
                i -= 1;
            }
            setCurrentItem(i, true);
        } else {
            setCurrentItem(0, true);
        }
    }
    
    private void setCurrentItem(int p, boolean internal) {
        if (internal) {
            systemFontsList.setSelectedIndex(p);
            int spos = p * (systemFontsScrollPane.getVerticalScrollBar().getMaximum() / names.length);
            spos -= (systemFontsScrollPane.getSize().height/2);
            systemFontsScrollPane.getVerticalScrollBar().setValue(spos);
        }
        
        if (p >= 0)
            mw.setCurrentFont(names[p], location, p);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        systemFontsScrollPane = new javax.swing.JScrollPane();
        systemFontsList = new javax.swing.JList();

        setLayout(new java.awt.BorderLayout());

        systemFontsScrollPane.setBorder(null);
        systemFontsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        systemFontsList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                systemFontsListKeyReleased(evt);
            }
        });
        systemFontsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                systemFontsListMouseClicked(evt);
            }
        });

        systemFontsScrollPane.setViewportView(systemFontsList);

        add(systemFontsScrollPane, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    private void systemFontsListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_systemFontsListKeyReleased
        setCurrentItem(systemFontsList.getSelectedIndex(), false);
    }//GEN-LAST:event_systemFontsListKeyReleased

    private void systemFontsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_systemFontsListMouseClicked
        setCurrentItem(systemFontsList.getSelectedIndex(), false);
    }//GEN-LAST:event_systemFontsListMouseClicked
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        // Do nothing
    }//GEN-LAST:event_exitForm
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList systemFontsList;
    private javax.swing.JScrollPane systemFontsScrollPane;
    // End of variables declaration//GEN-END:variables
}